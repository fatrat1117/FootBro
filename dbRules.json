{
    "rules": {
        "admins": {
            ".read": true,
            ".write": false
        },
        // Currently Does not know the chats logic, so leave it as default
        "chats": {
            ".read": "auth !== null",
            ".write": "auth !== null"
        },
        "cheerleaders": {
            "approved": {
                ".read": true,
                ".write": "root.child('admins').hasChild(auth.uid)"
            },
            "pending": {
                //in case self id does not exist
                ".read": true,
                ".write": "auth !== null",
                "$id": {
                    ".read": "$id === auth.uid"
                }
            }
        },
        "matches": {
            ".read": true,
            "dates": {
                ".write": "root.child('admins').hasChild(auth.uid) || root.child('teams').child(root.child('players').child(auth.uid).child('basic-info').child('teamId').val()).child('basic-info').child('captain').val() === auth.uid"
                //".write": "root.child('admins').hasChild(auth.uid) || root.child('players').hasChild(auth.uid)"
            },
            "list": {
                // Only admin or team founder can write to this location
                ".write": "root.child('admins').hasChild(auth.uid) || root.child('teams').child(root.child('players').child(auth.uid).child('basic-info').child('teamId').val()).child('basic-info').child('captain').val() === auth.uid",
                ".indexOn": [
                    "date",
                    "tournamentId"
                ],
                ".validate": "newData.exists()",
                "$id": {
                    ".validate": "$id != null"
                }
            }
        },
        "misc": {
            "feedbacks": {
                ".read": "root.child('admins').hasChild(auth.uid)",
                ".write": true
            }
        },
        "orders": {
            "$orderid": {
                ".read": "root.child('admins').hasChild(auth.uid) || auth.uid===data.child('from').val()||auth.uid===data.child('to').val()",
                ".write": "root.child('players').hasChild(auth.uid)"
            }
        },
        "player_social": {
            ".read": true,
            ".write": "auth !== null"
        },
        "players": {
            ".read": true,
            ".write": "auth !== null",
            ".validate": "newData.exists()",
            "$id": {
                ".validate": "$id != null"
            }
        },
        "public": {
            ".read": true,
            ".write": true,
            "players": {
                ".indexOn": [
                    "popularity"
                ],
                ".validate": "newData.exists()",
                "$id": {
                    ".validate": "$id != null"
                }
            },
            "teams": {
                ".indexOn": [
                    "popularity",
                    "name",
                    "ability"
                ],
                ".validate": "newData.exists()",
                "$id": {
                    ".validate": "$id != null"
                }
            },
            "cheerleaders": {
                ".validate": "newData.exists()",
                "$id": {
                    ".validate": "$id != null"
                }
            }
        },
        "team_squads": {
            ".read": true,
            "$teamId": {
                ".write": "root.child('admins').hasChild(auth.uid) || root.child('teams').child($teamId).child('players').hasChild(auth.uid)",
                "matches": {
                    "$matchId": {
                        ".write": "auth !== null"
                    }
                }
            }
        },
        "teams": {
            ".read": true,
            ".write": "auth !== null",
            ".validate": "newData.exists()",
            "$teamid": {
                ".validate": "$teamid != null",
                "basic-info": {
                    ".write": "root.child('admins').hasChild(auth.uid) || auth.uid===data.child('captain').val() || !data.exists()&&newData.exists()&&root.child('players').hasChild(auth.uid)"
                },
                "chatroom": {
                    ".read": "root.child('admins').hasChild(auth.uid) || data.parent().child('players').hasChild(auth.uid)",
                    ".write": "root.child('admins').hasChild(auth.uid) || data.parent().child('players').hasChild(auth.uid)"
                },
                "detail-info": {
                    ".read": true,
                    ".write": "root.child('admins').hasChild(auth.uid) || auth.uid===root.child('teams').child(data.parent().val()).child('basic-info').child('captain').val()"
                },
                "matches": {
                    ".read": true,
                    ".write": "root.child('admins').hasChild(auth.uid) || auth.uid===root.child('teams').child(data.parent().val()).child('basic-info').child('captain').val()"
                },
                "players": {
                    ".read": true,
                    ".write": "root.child('admins').hasChild(auth.uid) || auth.uid===root.child('teams').child(data.parent().val()).child('basic-info').child('captain').val()"
                }
            }
        },
        "teams_matches": {
            ".read": true,
            ".write": "root.child('admins').hasChild(auth.uid)"
        },
        "teams_stats": {
            ".read": true,
            ".write": "root.child('admins').hasChild(auth.uid)"
        },
        "tournaments": {
            ".read": true,
            ".write": "root.child('admins').hasChild(auth.uid)"
        }
    }
}